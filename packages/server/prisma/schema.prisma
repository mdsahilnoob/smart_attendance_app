// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum AttendanceMethod {
  QR
  MANUAL
  GEOFENCE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum NotificationType {
  GRADE_UPDATE
  NEW_RESOURCE
  ATTENDANCE_ALERT
  ANNOUNCEMENT
  ACTIVITY_SUGGESTION
}

enum FileType {
  PDF
  VIDEO
  LINK
  IMAGE
  DOCUMENT
}

// Core User Model
model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String
  role     Role   @default(STUDENT)

  // Profile relationships (one-to-one)
  studentProfile StudentProfile?
  teacherProfile TeacherProfile?

  notifications Notification[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Student-specific data
model StudentProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  interests   String[] // Array of interests
  careerGoals String?

  // Relationships
  classes             Class[]             @relation("StudentClasses")
  attendanceRecords   AttendanceRecord[]
  personalGoals       PersonalGoal[]
  activityHistory     ActivityHistory[]
  performanceMetrics  PerformanceMetric[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("student_profiles")
}

// Teacher-specific data
model TeacherProfile {
  id         String @id @default(cuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  department String

  // Relationships
  classes Class[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("teacher_profiles")
}

// Class/Course Model
model Class {
  id         String @id @default(cuid())
  courseName String
  courseCode String @unique
  teacherId  String

  // Relationships
  teacher   TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  students  StudentProfile[] @relation("StudentClasses")
  timetable TimetableSlot[]
  resources          Resource[]
  performanceMetrics PerformanceMetric[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("classes")
}

// Timetable/Schedule Model
model TimetableSlot {
  id        String    @id @default(cuid())
  classId   String
  dayOfWeek DayOfWeek
  startTime DateTime
  endTime   DateTime

  // Relationships
  class             Class              @relation(fields: [classId], references: [id], onDelete: Cascade)
  attendanceRecords AttendanceRecord[]
  qrSessions        QRSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("timetable_slots")
}

// Attendance tracking
model AttendanceRecord {
  id              String           @id @default(cuid())
  studentId       String
  timetableSlotId String
  timestamp       DateTime         @default(now())
  status          AttendanceStatus @default(ABSENT)
  method          AttendanceMethod @default(QR)

  // Relationships
  student       StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  timetableSlot TimetableSlot  @relation(fields: [timetableSlotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Ensure one attendance record per student per timetable slot
  @@unique([studentId, timetableSlotId])
  @@map("attendance_records")
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileType    FileType
  url         String   // S3 URL or external link
  classId     String

  // Relationships
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resources")
}

model PerformanceMetric {
  id        String  @id @default(cuid())
  studentId String
  classId   String
  grade     Float   // Numeric grade
  feedback  String? // Teacher feedback
  
  // Relationships
  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class          @relation(fields: [classId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("performance_metrics")
}

model Notification {
  id         String           @id @default(cuid())
  userId     String
  type       NotificationType
  title      String
  content    String
  readStatus Boolean          @default(false)

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

// Activity suggestions for students
model ActivitySuggestion {
  id              String   @id @default(cuid())
  title           String
  description     String
  category        String
  estimatedTime   Int      // in minutes
  relevantCourses String[] // Array of course codes

  // Relationships
  activityHistory ActivityHistory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("activity_suggestions")
}

// Student's personal goals
model PersonalGoal {
  id          String    @id @default(cuid())
  studentId   String
  title       String
  description String
  deadline    DateTime?
  completed   Boolean   @default(false)

  // Relationships
  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("personal_goals")
}

// Track student activity history
model ActivityHistory {
  id                   String    @id @default(cuid())
  studentId            String
  activitySuggestionId String
  completedAt          DateTime?
  timeSpent            Int?      // in minutes
  rating               Int?      // 1-5 rating

  // Relationships
  student            StudentProfile    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  activitySuggestion ActivitySuggestion @relation(fields: [activitySuggestionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("activity_history")
}

// QR Code sessions for attendance
model QRSession {
  id              String    @id @default(cuid())
  timetableSlotId String
  qrCode          String    @unique
  expiresAt       DateTime
  isActive        Boolean   @default(true)

  // Relationships
  timetableSlot TimetableSlot @relation(fields: [timetableSlotId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("qr_sessions")
}
